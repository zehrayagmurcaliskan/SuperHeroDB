@inject ISuperHeroService SuperHeroService
@inject IJSRuntime JSRunTime
@if (Hero.Id == 0){
<h3> Create a new hero</h3>;
}
else
{
<h3> Edit "@Hero.HeroName"</h3>;
}

<EditForm Model="Hero" OnSubmit="HandleSubmit">
    <InputText @bind-Value="Hero.FirstName" class="form-control" placeholder="First Name"> </InputText>
    <br />
    <InputText @bind-Value="Hero.LastName" class="form-control" placeholder="Last Name"> </InputText>
    <br />
    <InputText @bind-Value="Hero.HeroName" class="form-control" placeholder="Hero Name"> </InputText>
    <br />

    <div class="form-group">
       <label>Comic</label> <br />
        <InputRadioGroup @bind-Value="comicId" class="form-control">
            @foreach (var comic in SuperHeroService.Comics)
            {
                <InputRadio Value="@comic.Id"/><span style="padding-left :5px;">@comic.Name</span><br />
            }
        </InputRadioGroup>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>

@code {

    // [Parameter]
    //public SuperHeroDB.Shared.SuperHero heroToEdit { get; set; }

    [Parameter]
    public SuperHeroDB.Shared.SuperHero Hero { get; set; } = new SuperHeroDB.Shared.SuperHero();
    int comicId = 1;

    protected override async Task OnParametersSetAsync()
    {


        await SuperHeroService.GetComics();
        Hero.Comic = new Comic();
        comicId = Hero.Comic.Id;

    }

    async void HandleSubmit()
    {
        Hero.Comic = SuperHeroService.Comics.FirstOrDefault(c=>c.Id==comicId);

        await JSRunTime.InvokeVoidAsync("console.log", Hero);

        if (Hero.Id==0)
            await SuperHeroService.CreateSuperHero(Hero);
        else
            await SuperHeroService.UpdateSuperHero(Hero, Hero.Id);

    }


}
